"""Add papal_name field to clergy table

Revision ID: 4c4903a27386
Revises: 9eed07e44dd1
Create Date: 2025-09-15 10:23:40.104316

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4c4903a27386'
down_revision = '9eed07e44dd1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    from sqlalchemy import inspect
    
    # Get connection to check existing columns
    connection = op.get_bind()
    inspector = inspect(connection)
    tables = inspector.get_table_names()
    
    # Check if admin_invite table exists and add foreign key
    if 'admin_invite' in tables:
        admin_invite_columns = [col['name'] for col in inspector.get_columns('admin_invite')]
        if 'role_id' in admin_invite_columns:
            try:
                with op.batch_alter_table('admin_invite', schema=None) as batch_op:
                    batch_op.create_foreign_key(None, 'role', ['role_id'], ['id'])
            except Exception as e:
                print(f"⚠️  Foreign key may already exist for admin_invite: {e}")

    # Check if clergy table exists and add column if it doesn't exist
    if 'clergy' in tables:
        clergy_columns = [col['name'] for col in inspector.get_columns('clergy')]
        
        if 'papal_name' not in clergy_columns:
            with op.batch_alter_table('clergy', schema=None) as batch_op:
                batch_op.add_column(sa.Column('papal_name', sa.String(length=200), nullable=True))
        else:
            print("⚠️  Column 'papal_name' already exists in clergy table")

    # Check if user table exists and modify it
    if 'user' in tables:
        user_columns = [col['name'] for col in inspector.get_columns('user')]
        
        with op.batch_alter_table('user', schema=None) as batch_op:
            if 'role_id' in user_columns:
                try:
                    batch_op.alter_column('role_id',
                           existing_type=sa.INTEGER(),
                           nullable=False)
                except Exception as e:
                    print(f"⚠️  role_id column may already be non-nullable: {e}")
            
            if 'email' in user_columns:
                try:
                    batch_op.create_unique_constraint(None, ['email'])
                except Exception as e:
                    print(f"⚠️  Unique constraint on email may already exist: {e}")
            
            if 'role_id' in user_columns:
                try:
                    batch_op.create_foreign_key(None, 'role', ['role_id'], ['id'])
                except Exception as e:
                    print(f"⚠️  Foreign key on role_id may already exist: {e}")
            
            if 'is_admin' in user_columns:
                try:
                    batch_op.drop_column('is_admin')
                except Exception as e:
                    print(f"⚠️  Column 'is_admin' may not exist: {e}")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('role_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('clergy', schema=None) as batch_op:
        batch_op.drop_column('papal_name')

    with op.batch_alter_table('admin_invite', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    # ### end Alembic commands ###
