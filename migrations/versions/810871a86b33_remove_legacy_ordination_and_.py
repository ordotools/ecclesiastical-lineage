"""Remove legacy ordination and consecration fields from clergy table

Revision ID: 810871a86b33
Revises: abc123def456
Create Date: 2025-09-19 12:32:27.218606

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '810871a86b33'
down_revision = 'abc123def456'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    from sqlalchemy import inspect
    
    # Get connection to check existing columns
    connection = op.get_bind()
    inspector = inspect(connection)
    
    # Check if clergy table exists and remove legacy columns if they exist
    tables = inspector.get_table_names()
    if 'clergy' in tables:
        clergy_columns = [col['name'] for col in inspector.get_columns('clergy')]
        legacy_columns = ['co_consecrators', 'consecrator_id', 'date_of_consecration', 'ordaining_bishop_id', 'date_of_ordination']
        
        with op.batch_alter_table('clergy', schema=None) as batch_op:
            for column in legacy_columns:
                if column in clergy_columns:
                    try:
                        batch_op.drop_column(column)
                        print(f"✅ Dropped legacy column: {column}")
                    except Exception as e:
                        print(f"⚠️  Could not drop column {column}: {e}")
                else:
                    print(f"⚠️  Legacy column {column} does not exist, skipping")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Add back legacy ordination and consecration fields to clergy table
    with op.batch_alter_table('clergy', schema=None) as batch_op:
        batch_op.add_column(sa.Column('date_of_ordination', sa.DATE(), nullable=True))
        batch_op.add_column(sa.Column('ordaining_bishop_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('date_of_consecration', sa.DATE(), nullable=True))
        batch_op.add_column(sa.Column('consecrator_id', sa.INTEGER(), nullable=True))
        batch_op.add_column(sa.Column('co_consecrators', sa.TEXT(), nullable=True))
        
        # Add foreign key constraints
        batch_op.create_foreign_key('fk_clergy_ordaining_bishop', 'clergy', ['ordaining_bishop_id'], ['id'])
        batch_op.create_foreign_key('fk_clergy_consecrator', 'clergy', ['consecrator_id'], ['id'])
    # ### end Alembic commands ###
