"""Add ordination and consecration tables with multiple entries support

Revision ID: abc123def456
Revises: bc170867dac1
Create Date: 2025-09-15 17:30:00.000000

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'abc123def456'
down_revision = '2a3813314646'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if tables already exist before creating them
    from sqlalchemy import inspect
    inspector = inspect(op.get_bind())
    existing_tables = inspector.get_table_names()
    
    if 'ordination' not in existing_tables:
        # Create ordination table
        op.create_table('ordination',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('clergy_id', sa.Integer(), nullable=False),
            sa.Column('date', sa.Date(), nullable=False),
            sa.Column('ordaining_bishop_id', sa.Integer(), nullable=True),
            sa.Column('is_sub_conditione', sa.Boolean(), nullable=False),
            sa.Column('is_doubtful', sa.Boolean(), nullable=False),
            sa.Column('is_invalid', sa.Boolean(), nullable=False),
            sa.Column('notes', sa.Text(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('updated_at', sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(['clergy_id'], ['clergy.id'], ),
            sa.ForeignKeyConstraint(['ordaining_bishop_id'], ['clergy.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    else:
        print("Ordination table already exists, skipping creation")
    
    if 'consecration' not in existing_tables:
        # Create consecration table
        op.create_table('consecration',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('clergy_id', sa.Integer(), nullable=False),
            sa.Column('date', sa.Date(), nullable=False),
            sa.Column('consecrator_id', sa.Integer(), nullable=True),
            sa.Column('is_sub_conditione', sa.Boolean(), nullable=False),
            sa.Column('is_doubtful', sa.Boolean(), nullable=False),
            sa.Column('is_invalid', sa.Boolean(), nullable=False),
            sa.Column('notes', sa.Text(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('updated_at', sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(['clergy_id'], ['clergy.id'], ),
            sa.ForeignKeyConstraint(['consecrator_id'], ['clergy.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    else:
        print("Consecration table already exists, skipping creation")
    
    if 'co_consecrators' not in existing_tables:
        # Create co_consecrators association table
        op.create_table('co_consecrators',
            sa.Column('consecration_id', sa.Integer(), nullable=False),
            sa.Column('co_consecrator_id', sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(['consecration_id'], ['consecration.id'], ),
            sa.ForeignKeyConstraint(['co_consecrator_id'], ['clergy.id'], ),
            sa.PrimaryKeyConstraint('consecration_id', 'co_consecrator_id')
        )
    else:
        print("Co_consecrators table already exists, skipping creation")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if tables exist before dropping them
    from sqlalchemy import inspect
    inspector = inspect(op.get_bind())
    existing_tables = inspector.get_table_names()
    
    if 'co_consecrators' in existing_tables:
        op.drop_table('co_consecrators')
    else:
        print("Co_consecrators table doesn't exist, skipping drop")
    
    if 'consecration' in existing_tables:
        op.drop_table('consecration')
    else:
        print("Consecration table doesn't exist, skipping drop")
    
    if 'ordination' in existing_tables:
        op.drop_table('ordination')
    else:
        print("Ordination table doesn't exist, skipping drop")
    # ### end Alembic commands ###
