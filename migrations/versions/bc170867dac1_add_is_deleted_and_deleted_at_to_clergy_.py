"""Add is_deleted and deleted_at to clergy for soft delete

Revision ID: bc170867dac1
Revises: 
Create Date: 2025-07-25 06:53:42.042269

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bc170867dac1'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    from sqlalchemy import inspect
    
    # Get connection to check existing columns
    connection = op.get_bind()
    inspector = inspect(connection)
    
    # Check if admin_invite table exists and add foreign key
    tables = inspector.get_table_names()
    if 'admin_invite' in tables:
        admin_invite_columns = [col['name'] for col in inspector.get_columns('admin_invite')]
        if 'role_id' in admin_invite_columns:
            try:
                with op.batch_alter_table('admin_invite', schema=None) as batch_op:
                    batch_op.create_foreign_key(None, 'role', ['role_id'], ['id'])
            except Exception as e:
                print(f"⚠️  Foreign key may already exist for admin_invite: {e}")

    # Check if clergy table exists and add columns if they don't exist
    if 'clergy' in tables:
        clergy_columns = [col['name'] for col in inspector.get_columns('clergy')]
        
        with op.batch_alter_table('clergy', schema=None) as batch_op:
            if 'is_deleted' not in clergy_columns:
                batch_op.add_column(sa.Column('is_deleted', sa.Boolean(), nullable=True))
            else:
                print("⚠️  Column 'is_deleted' already exists in clergy table")
            
            if 'deleted_at' not in clergy_columns:
                batch_op.add_column(sa.Column('deleted_at', sa.DateTime(), nullable=True))
            else:
                print("⚠️  Column 'deleted_at' already exists in clergy table")

    # Check if user table exists and modify it
    if 'user' in tables:
        user_columns = [col['name'] for col in inspector.get_columns('user')]
        
        with op.batch_alter_table('user', schema=None) as batch_op:
            if 'role_id' in user_columns:
                try:
                    batch_op.alter_column('role_id',
                           existing_type=sa.INTEGER(),
                           nullable=False)
                except Exception as e:
                    print(f"⚠️  role_id column may already be non-nullable: {e}")
            
            if 'email' in user_columns:
                try:
                    batch_op.create_unique_constraint(None, ['email'])
                except Exception as e:
                    print(f"⚠️  Unique constraint on email may already exist: {e}")
            
            if 'role_id' in user_columns:
                try:
                    batch_op.create_foreign_key(None, 'role', ['role_id'], ['id'])
                except Exception as e:
                    print(f"⚠️  Foreign key on role_id may already exist: {e}")
            
            if 'is_admin' in user_columns:
                try:
                    batch_op.drop_column('is_admin')
                except Exception as e:
                    print(f"⚠️  Column 'is_admin' may not exist: {e}")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('role_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('clergy', schema=None) as batch_op:
        batch_op.drop_column('deleted_at')
        batch_op.drop_column('is_deleted')

    with op.batch_alter_table('admin_invite', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    # ### end Alembic commands ###
